{"name":"Dyna Filter","tagline":"Dynamic Object Filtering","body":"### Dyna Filter\r\n\r\nDynamic Object filtering for Json serialization.\r\n\r\nThis library provides a non-intrusive way to dynamically filter the desired fields to be passed for a serialization mechanism.\r\n\r\nAlthough designed to be used with Json, other serialization mechanism (e.g. binary) could also make use of the filter.\r\n\r\n### Current Release\r\n\r\n```xml\r\n<dependency>\r\n\t<groupId>com.github.bmsantos</groupId>\r\n\t<artifactId>dynafilter</artifactId>\r\n\t<version>1.0.0</version>\r\n</dependency>\r\n```\r\n\r\n#### How it works?\r\n\r\nUse the **@DynaFilter** annotation to filter out the fields of interest of any given data type and applied to the usual request handler method:\r\n\r\n```java\r\n@RequestMapping(value = \"collection\", method = GET, produces = \"application/json\")\r\n@DynaFilter(value = Data.class, fields = { \"name\", \"description\" }, includeNulls = true)\r\npublic @ResponseBody List<Data> returnCollection() {\r\n    // ...\r\n}\r\n```\r\n\r\nThe annotation get's processed by a spring handler when necessary (similar in concept to a interceptor).\r\n \r\nTo filter multiple data types use **@DynaFilters** to wrap multiple **@DynaFilter** annotations.\r\n\r\n```java\r\n@RequestMapping(value = \"hybrid\", method = GET, produces = \"application/json\")\r\n@DynaFilters({\r\n    @DynaFilter(value = User.class, fields = \"name\"),\r\n    @DynaFilter(value = Address.class, fields = \"id\")\r\n})\r\npublic @ResponseBody List<Object> returnHybrid() {\r\n    // ...\r\n}\r\n```\r\n\r\nFor reusability use **@NamedDynaFilters** annotation:\r\n\r\n```java\r\n@RequestMapping(value = \"named\", method = GET, produces = \"application/json\")\r\n@NamedDynaFilters(value = { \"userAge\", \"addressOnly\" })\r\npublic @ResponseBody List<Object> shouldUseNamedFitlers() {\r\n    // ...\r\n}\r\n```\r\n\r\nand configure the named filters in the respective factory:\r\n\r\n```xml\r\n    <bean class=\"com.github.bmsantos.dynafilter.DynaFilterFactory\">\r\n        <property name=\"namedFilters\">\r\n            <list>\r\n                <bean class=\"com.github.bmsantos.dynafilter.NamedDynaFilter\">\r\n                    <constructor-arg value=\"userAge\" /> // Filter name\r\n                    <constructor-arg value=\"com.github.bmsantos.dynafilter.controller.User\" /> // Type\r\n                    <constructor-arg value=\"true\" /> // Include nulls\r\n                    <constructor-arg value=\"id,age\" /> // Fields\r\n                </bean>\r\n                <bean class=\"com.github.bmsantos.dynafilter.NamedDynaFilter\">\r\n                    <constructor-arg value=\"addressOnly\" /> // Filter name\r\n                    <constructor-arg value=\"com.github.bmsantos.dynafilter.controller.Address\" /> // Type\r\n                    <constructor-arg value=\"id,address\" /> // Field\r\n                </bean>\r\n            </list>\r\n        </property>\r\n    </bean>\r\n```\r\n\r\n#### Lookup strategy\r\n\r\nWhen looking for the configured fields, the lookup strategy is the following:\r\n\r\n1. Fields/attributes/properties\r\n2. Access methods (Camel cased methods that start with *get*) [1]\r\n3. Exact method (methods with the exact same name) [1]  \r\n\r\n[1] Methods must have no arguments \r\n\r\n\r\n#### Usage\r\n\r\nAdd the DynaFilterFactory to your Spring MVC Context configuration xml or bean:\r\n\r\n```xml\r\n    <bean class=\"com.github.bmsantos.dynafilter.DynaFilterFactory\" />\r\n```\r\n\r\nor\r\n\r\n```java\r\n@Configuration\r\npublic class AppConfig {\r\n\r\n    @Bean\r\n    public DynaFilterFactory DynaFilterFactory() {\r\n        return new DynaFilterFactory();\r\n    }\r\n\r\n}\r\n```\r\n\r\nAnd annotate the controller or any other bean with the one or more filter annotation as shown in the \"How it works?\" section above.\r\nMake sure you look into the provided test controller and spring context for a working example.\r\n\r\n#### Build project and run tests\r\n\r\n    mvn clean install\r\n\r\n.\r\n\r\n#### Manual test execution\r\n\r\n\tcd web-test\r\n\tmvn jetty:run\r\n    \r\nThen point your browser to:\r\n\r\n1. [Simple instance with primitive types](http://localhost:8080/jsonfilter/simple)\r\n2. [Collection of simple instances](http://localhost:8080/jsonfilter/collection)\r\n3. [Collection of mixed simples instances](http://localhost:8080/jsonfilter/hybrid)\r\n4. [Graph of complex instance](http://localhost:8080/jsonfilter/composite)\r\n5. [Fully filtered object](http://localhost:8080/jsonfilter/empty)\r\n6. [Fully filtered collection](http://localhost:8080/jsonfilter/emptyarray)\r\n7. [Include nulls](http://localhost:8080/jsonfilter/includenulls)\r\n8. [Named filters](http://localhost:8080/jsonfilter/named)\r\n9. [Method access](http://localhost:8080/jsonfilter/accessors)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}